# docker-compose.yml - PostgreSQL Development Environment

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: journaling_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: journaling_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d journaling_assistant"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - journaling_network

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: journaling_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redispassword
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - journaling_network

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: journaling_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/journaling_assistant
      - REDIS_URL=redis://:redispassword@redis:6379
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app/backend
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - journaling_network

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: journaling_celery
    restart: unless-stopped
    command: celery -A backend.app.core.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/journaling_assistant
      - REDIS_URL=redis://:redispassword@redis:6379
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app/backend
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - journaling_network

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: journaling_beat
    restart: unless-stopped
    command: celery -A backend.app.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/journaling_assistant
      - REDIS_URL=redis://:redispassword@redis:6379
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app/backend
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - journaling_network

  # Adminer for Database Management
  adminer:
    image: adminer:4.8.1
    container_name: journaling_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=hydra
    depends_on:
      - postgres
    networks:
      - journaling_network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: journaling_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - journaling_network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: journaling_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - journaling_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  journaling_network:
    driver: bridge
    name: journaling_network