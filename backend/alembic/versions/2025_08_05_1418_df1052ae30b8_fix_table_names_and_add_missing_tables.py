# backend/alembic/script.py.mako - Migration Template

"""Fix table names and add missing tables

Revision ID: df1052ae30b8
Revises: 063f59923e87
Create Date: 2025-08-05 14:18:47.178613

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'df1052ae30b8'
down_revision: Union[str, None] = '063f59923e87'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('entry_templates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('category', sa.String(length=100), nullable=False),
    sa.Column('content_template', sa.Text(), nullable=False),
    sa.Column('prompts', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('guided_questions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('psychology_domains', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('therapeutic_techniques', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('difficulty_level', sa.String(length=20), nullable=False),
    sa.Column('estimated_time_minutes', sa.Integer(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('effectiveness_rating', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_entry_templates_created_at'), 'entry_templates', ['created_at'], unique=False)
    op.create_index(op.f('ix_entry_templates_deleted_at'), 'entry_templates', ['deleted_at'], unique=False)
    op.create_index('ix_templates_category_public', 'entry_templates', ['category', 'is_public'], unique=False)
    op.create_index('ix_templates_psychology_gin', 'entry_templates', ['psychology_domains'], unique=False, postgresql_using='gin')
    op.create_index('ix_templates_usage', 'entry_templates', ['usage_count', 'effectiveness_rating'], unique=False)
    op.create_table('topics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(length=7), nullable=False),
    sa.Column('icon', sa.String(length=50), nullable=True),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('psychology_domains', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('context_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('entry_count', sa.Integer(), nullable=False),
    sa.Column('last_entry_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('usage_statistics', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['topics.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'name', 'parent_id', name='uq_topics_user_name_parent')
    )
    op.create_index(op.f('ix_topics_created_at'), 'topics', ['created_at'], unique=False)
    op.create_index(op.f('ix_topics_deleted_at'), 'topics', ['deleted_at'], unique=False)
    op.create_index('ix_topics_parent_sort', 'topics', ['parent_id', 'sort_order'], unique=False)
    op.create_index('ix_topics_psychology_gin', 'topics', ['psychology_domains'], unique=False, postgresql_using='gin')
    op.create_index('ix_topics_user_name', 'topics', ['user_id', 'name'], unique=False)
    op.create_table('chat_messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('word_count', sa.Integer(), nullable=False),
    sa.Column('character_count', sa.Integer(), nullable=False),
    sa.Column('sentiment_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('emotion_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('psychology_context', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('coaching_insights', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('message_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('model_used', sa.String(length=100), nullable=True),
    sa.Column('model_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['chat_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_chat_messages_created_at'), 'chat_messages', ['created_at'], unique=False)
    op.create_index(op.f('ix_chat_messages_deleted_at'), 'chat_messages', ['deleted_at'], unique=False)
    op.create_index('ix_messages_psychology_gin', 'chat_messages', ['psychology_context'], unique=False, postgresql_using='gin')
    op.create_index('ix_messages_role_timestamp', 'chat_messages', ['role', 'timestamp'], unique=False)
    op.create_index('ix_messages_sentiment', 'chat_messages', ['sentiment_score'], unique=False)
    op.create_index('ix_messages_session_timestamp', 'chat_messages', ['session_id', 'timestamp'], unique=False)
    op.create_table('entries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('entry_type', sa.String(length=50), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('topic_id', sa.UUID(), nullable=True),
    sa.Column('word_count', sa.Integer(), nullable=False),
    sa.Column('reading_time_minutes', sa.Integer(), nullable=False),
    sa.Column('mood', sa.String(length=50), nullable=True),
    sa.Column('sentiment_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('emotion_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('auto_tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('psychology_tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_favorite', sa.Boolean(), nullable=False),
    sa.Column('is_private', sa.Boolean(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('parent_entry_id', sa.UUID(), nullable=True),
    sa.Column('template_id', sa.UUID(), nullable=True),
    sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True),
    sa.Column('psychology_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('analysis_results', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint('sentiment_score BETWEEN -1 AND 1', name='ck_entries_sentiment_range'),
    sa.CheckConstraint('version >= 1', name='ck_entries_version_positive'),
    sa.CheckConstraint('word_count >= 0', name='ck_entries_word_count_positive'),
    sa.ForeignKeyConstraint(['parent_entry_id'], ['entries.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['entry_templates.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_entries_analysis_gin', 'entries', ['analysis_results'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_entries_created_at'), 'entries', ['created_at'], unique=False)
    op.create_index(op.f('ix_entries_deleted_at'), 'entries', ['deleted_at'], unique=False)
    op.create_index('ix_entries_favorites', 'entries', ['user_id', 'is_favorite', 'created_at'], unique=False)
    op.create_index('ix_entries_mood_sentiment', 'entries', ['mood', 'sentiment_score'], unique=False)
    op.create_index('ix_entries_psychology_gin', 'entries', ['psychology_metadata'], unique=False, postgresql_using='gin')
    op.create_index('ix_entries_search_vector', 'entries', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_index('ix_entries_tags_gin', 'entries', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('ix_entries_title_text', 'entries', ['title'], unique=False, postgresql_using='gin', postgresql_ops={'title': 'gin_trgm_ops'})
    op.create_index('ix_entries_topic_created', 'entries', ['topic_id', 'created_at'], unique=False)
    op.create_index('ix_entries_user_created', 'entries', ['user_id', 'created_at'], unique=False)
    op.drop_index(op.f('idx_entries_categories'), table_name='journal_entries', postgresql_using='gin')
    op.drop_index(op.f('idx_entries_content_search'), table_name='journal_entries', postgresql_ops={'content': 'gin_trgm_ops'}, postgresql_using='gin')
    op.drop_index(op.f('idx_entries_mood'), table_name='journal_entries')
    op.drop_index(op.f('idx_entries_tags'), table_name='journal_entries', postgresql_using='gin')
    op.drop_index(op.f('idx_entries_user_created'), table_name='journal_entries')
    op.drop_index(op.f('idx_entries_user_date'), table_name='journal_entries')
    op.drop_table('journal_entries')
    op.drop_index(op.f('idx_analytics_computation'), table_name='user_analytics')
    op.drop_index(op.f('idx_analytics_freshness'), table_name='user_analytics')
    op.drop_index(op.f('idx_analytics_user_period'), table_name='user_analytics')
    op.drop_table('user_analytics')
    op.drop_index(op.f('idx_psychology_category'), table_name='psychology_content')
    op.drop_index(op.f('idx_psychology_content_search'), table_name='psychology_content', postgresql_ops={'content': 'gin_trgm_ops'}, postgresql_using='gin')
    op.drop_index(op.f('idx_psychology_effectiveness'), table_name='psychology_content')
    op.drop_index(op.f('idx_psychology_keywords'), table_name='psychology_content', postgresql_using='gin')
    op.drop_index(op.f('idx_psychology_tags'), table_name='psychology_content', postgresql_using='gin')
    op.drop_index(op.f('idx_psychology_type'), table_name='psychology_content')
    op.drop_table('psychology_content')
    op.drop_index(op.f('idx_migration_started'), table_name='migration_logs')
    op.drop_index(op.f('idx_migration_type_status'), table_name='migration_logs')
    op.drop_table('migration_logs')
    op.drop_index(op.f('idx_conversations_entry'), table_name='conversations')
    op.drop_index(op.f('idx_conversations_processing_time'), table_name='conversations')
    op.drop_index(op.f('idx_conversations_session_created'), table_name='conversations')
    op.drop_table('conversations')
    op.add_column('chat_sessions', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('chat_sessions', sa.Column('personality_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('chat_sessions', sa.Column('status', sa.String(length=20), nullable=False))
    op.add_column('chat_sessions', sa.Column('total_duration_minutes', sa.Integer(), nullable=False))
    op.add_column('chat_sessions', sa.Column('average_response_time_ms', sa.Integer(), nullable=True))
    op.add_column('chat_sessions', sa.Column('psychology_insights', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('chat_sessions', sa.Column('coaching_notes', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('chat_sessions', sa.Column('progress_tracking', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('chat_sessions', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('chat_sessions', sa.Column('auto_tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('chat_sessions', sa.Column('session_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('chat_sessions', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('chat_sessions', 'title',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=300),
               nullable=False)
    op.alter_column('chat_sessions', 'last_activity',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.drop_index(op.f('idx_sessions_type'), table_name='chat_sessions')
    op.drop_index(op.f('idx_sessions_user_activity'), table_name='chat_sessions')
    op.drop_index(op.f('idx_sessions_user_created'), table_name='chat_sessions')
    op.create_index(op.f('ix_chat_sessions_created_at'), 'chat_sessions', ['created_at'], unique=False)
    op.create_index(op.f('ix_chat_sessions_deleted_at'), 'chat_sessions', ['deleted_at'], unique=False)
    op.create_index('ix_sessions_activity', 'chat_sessions', ['last_activity'], unique=False)
    op.create_index('ix_sessions_psychology_gin', 'chat_sessions', ['psychology_insights'], unique=False, postgresql_using='gin')
    op.create_index('ix_sessions_type_status', 'chat_sessions', ['session_type', 'status'], unique=False)
    op.create_index('ix_sessions_user_created', 'chat_sessions', ['user_id', 'created_at'], unique=False)
    op.drop_constraint(op.f('chat_sessions_user_id_fkey'), 'chat_sessions', type_='foreignkey')
    op.create_foreign_key(None, 'chat_sessions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('chat_sessions', 'ai_model')
    op.drop_column('chat_sessions', 'context')
    op.drop_column('chat_sessions', 'is_active')
    op.drop_column('chat_sessions', 'temperature')
    op.drop_column('chat_sessions', 'system_prompt')
    op.add_column('users', sa.Column('display_name', sa.String(length=100), nullable=True))
    op.add_column('users', sa.Column('timezone', sa.String(length=50), nullable=False))
    op.add_column('users', sa.Column('language', sa.String(length=10), nullable=False))
    op.add_column('users', sa.Column('psychology_profile', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('users', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.drop_index(op.f('idx_users_created_at'), table_name='users')
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_index(op.f('idx_users_username'), table_name='users')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index('ix_users_active_created', 'users', ['is_active', 'created_at'], unique=False)
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_deleted_at'), 'users', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index('ix_users_preferences_gin', 'users', ['preferences'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_column('users', 'password_hash')
    op.drop_column('users', 'privacy_level')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'full_name')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('full_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('privacy_level', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index('ix_users_preferences_gin', table_name='users', postgresql_using='gin')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_deleted_at'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_index('ix_users_active_created', table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_users_username'), 'users', ['username'], unique=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('idx_users_created_at'), 'users', ['created_at'], unique=False)
    op.drop_column('users', 'deleted_at')
    op.drop_column('users', 'psychology_profile')
    op.drop_column('users', 'language')
    op.drop_column('users', 'timezone')
    op.drop_column('users', 'display_name')
    op.add_column('chat_sessions', sa.Column('system_prompt', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('chat_sessions', sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('chat_sessions', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('chat_sessions', sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('chat_sessions', sa.Column('ai_model', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'chat_sessions', type_='foreignkey')
    op.create_foreign_key(op.f('chat_sessions_user_id_fkey'), 'chat_sessions', 'users', ['user_id'], ['id'])
    op.drop_index('ix_sessions_user_created', table_name='chat_sessions')
    op.drop_index('ix_sessions_type_status', table_name='chat_sessions')
    op.drop_index('ix_sessions_psychology_gin', table_name='chat_sessions', postgresql_using='gin')
    op.drop_index('ix_sessions_activity', table_name='chat_sessions')
    op.drop_index(op.f('ix_chat_sessions_deleted_at'), table_name='chat_sessions')
    op.drop_index(op.f('ix_chat_sessions_created_at'), table_name='chat_sessions')
    op.create_index(op.f('idx_sessions_user_created'), 'chat_sessions', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_sessions_user_activity'), 'chat_sessions', ['user_id', 'last_activity'], unique=False)
    op.create_index(op.f('idx_sessions_type'), 'chat_sessions', ['session_type'], unique=False)
    op.alter_column('chat_sessions', 'last_activity',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('chat_sessions', 'title',
               existing_type=sa.String(length=300),
               type_=sa.VARCHAR(length=200),
               nullable=True)
    op.drop_column('chat_sessions', 'deleted_at')
    op.drop_column('chat_sessions', 'session_data')
    op.drop_column('chat_sessions', 'auto_tags')
    op.drop_column('chat_sessions', 'tags')
    op.drop_column('chat_sessions', 'progress_tracking')
    op.drop_column('chat_sessions', 'coaching_notes')
    op.drop_column('chat_sessions', 'psychology_insights')
    op.drop_column('chat_sessions', 'average_response_time_ms')
    op.drop_column('chat_sessions', 'total_duration_minutes')
    op.drop_column('chat_sessions', 'status')
    op.drop_column('chat_sessions', 'personality_config')
    op.drop_column('chat_sessions', 'description')
    op.create_table('conversations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entry_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('ai_response', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('processing_time_ms', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ai_model_used', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('token_usage', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sources_used', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('citations', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('user_feedback', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("user_feedback::text = ANY (ARRAY['thumbs_up'::character varying, 'thumbs_down'::character varying]::text[])", name=op.f('check_feedback_values')),
    sa.CheckConstraint('confidence_score >= 0.0::double precision AND confidence_score <= 1.0::double precision', name=op.f('check_confidence_range')),
    sa.ForeignKeyConstraint(['entry_id'], ['journal_entries.id'], name=op.f('conversations_entry_id_fkey')),
    sa.ForeignKeyConstraint(['session_id'], ['chat_sessions.id'], name=op.f('conversations_session_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('conversations_pkey'))
    )
    op.create_index(op.f('idx_conversations_session_created'), 'conversations', ['session_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_conversations_processing_time'), 'conversations', ['processing_time_ms'], unique=False)
    op.create_index(op.f('idx_conversations_entry'), 'conversations', ['entry_id'], unique=False)
    op.create_table('migration_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('migration_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('source_file', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('records_processed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('records_successful', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('records_failed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('validation_passed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processing_time_seconds', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'running'::character varying, 'completed'::character varying, 'failed'::character varying]::text[])", name=op.f('check_migration_status')),
    sa.PrimaryKeyConstraint('id', name=op.f('migration_logs_pkey'))
    )
    op.create_index(op.f('idx_migration_type_status'), 'migration_logs', ['migration_type', 'status'], unique=False)
    op.create_index(op.f('idx_migration_started'), 'migration_logs', ['started_at'], unique=False)
    op.create_table('psychology_content',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('subcategory', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('content_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('author', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('evidence_level', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False),
    sa.Column('keywords', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False),
    sa.Column('embedding_vector', postgresql.ARRAY(sa.DOUBLE_PRECISION(precision=53)), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('effectiveness_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("content_type::text = ANY (ARRAY['technique'::character varying, 'theory'::character varying, 'exercise'::character varying, 'assessment'::character varying, 'intervention'::character varying]::text[])", name=op.f('check_content_type')),
    sa.CheckConstraint("evidence_level::text = ANY (ARRAY['high'::character varying, 'moderate'::character varying, 'low'::character varying, 'theoretical'::character varying]::text[])", name=op.f('check_evidence_level')),
    sa.PrimaryKeyConstraint('id', name=op.f('psychology_content_pkey'))
    )
    op.create_index(op.f('idx_psychology_type'), 'psychology_content', ['content_type'], unique=False)
    op.create_index(op.f('idx_psychology_tags'), 'psychology_content', ['tags'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_psychology_keywords'), 'psychology_content', ['keywords'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_psychology_effectiveness'), 'psychology_content', ['effectiveness_score'], unique=False)
    op.create_index(op.f('idx_psychology_content_search'), 'psychology_content', ['content'], unique=False, postgresql_ops={'content': 'gin_trgm_ops'}, postgresql_using='gin')
    op.create_index(op.f('idx_psychology_category'), 'psychology_content', ['category', 'subcategory'], unique=False)
    op.create_table('user_analytics',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('period_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('period_start', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('period_end', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('total_entries', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_words', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('avg_mood', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sentiment_trends', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('emotion_patterns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('topic_distribution', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('writing_consistency', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('peak_writing_hours', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('most_active_days', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('stress_indicators', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('growth_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('therapy_progress', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('computation_time_ms', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('data_freshness', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("period_type::text = ANY (ARRAY['daily'::character varying, 'weekly'::character varying, 'monthly'::character varying, 'yearly'::character varying]::text[])", name=op.f('check_period_type')),
    sa.CheckConstraint('avg_mood >= 1.0::double precision AND avg_mood <= 10.0::double precision', name=op.f('check_avg_mood_range')),
    sa.CheckConstraint('writing_consistency >= 0.0::double precision AND writing_consistency <= 1.0::double precision', name=op.f('check_consistency_range')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_analytics_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_analytics_pkey')),
    sa.UniqueConstraint('user_id', 'period_type', 'period_start', name=op.f('uq_user_analytics_period'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_analytics_user_period'), 'user_analytics', ['user_id', 'period_type', 'period_start'], unique=False)
    op.create_index(op.f('idx_analytics_freshness'), 'user_analytics', ['data_freshness'], unique=False)
    op.create_index(op.f('idx_analytics_computation'), 'user_analytics', ['computation_time_ms'], unique=False)
    op.create_table('journal_entries',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('raw_content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('entry_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('mood_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('word_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('sentiment_analysis', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('emotion_analysis', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('topic_analysis', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('psychology_insights', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('embedding_model', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('embedding_vector', postgresql.ARRAY(sa.DOUBLE_PRECISION(precision=53)), autoincrement=False, nullable=True),
    sa.Column('categories', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False),
    sa.Column('is_private', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_archived', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint('mood_score >= 1.0::double precision AND mood_score <= 10.0::double precision', name=op.f('check_mood_range')),
    sa.CheckConstraint('word_count >= 0', name=op.f('check_word_count')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('journal_entries_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('journal_entries_pkey'))
    )
    op.create_index(op.f('idx_entries_user_date'), 'journal_entries', ['user_id', 'entry_date'], unique=False)
    op.create_index(op.f('idx_entries_user_created'), 'journal_entries', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_entries_tags'), 'journal_entries', ['tags'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_entries_mood'), 'journal_entries', ['mood_score'], unique=False)
    op.create_index(op.f('idx_entries_content_search'), 'journal_entries', ['content'], unique=False, postgresql_ops={'content': 'gin_trgm_ops'}, postgresql_using='gin')
    op.create_index(op.f('idx_entries_categories'), 'journal_entries', ['categories'], unique=False, postgresql_using='gin')
    op.drop_index('ix_entries_user_created', table_name='entries')
    op.drop_index('ix_entries_topic_created', table_name='entries')
    op.drop_index('ix_entries_title_text', table_name='entries', postgresql_using='gin', postgresql_ops={'title': 'gin_trgm_ops'})
    op.drop_index('ix_entries_tags_gin', table_name='entries', postgresql_using='gin')
    op.drop_index('ix_entries_search_vector', table_name='entries', postgresql_using='gin')
    op.drop_index('ix_entries_psychology_gin', table_name='entries', postgresql_using='gin')
    op.drop_index('ix_entries_mood_sentiment', table_name='entries')
    op.drop_index('ix_entries_favorites', table_name='entries')
    op.drop_index(op.f('ix_entries_deleted_at'), table_name='entries')
    op.drop_index(op.f('ix_entries_created_at'), table_name='entries')
    op.drop_index('ix_entries_analysis_gin', table_name='entries', postgresql_using='gin')
    op.drop_table('entries')
    op.drop_index('ix_messages_session_timestamp', table_name='chat_messages')
    op.drop_index('ix_messages_sentiment', table_name='chat_messages')
    op.drop_index('ix_messages_role_timestamp', table_name='chat_messages')
    op.drop_index('ix_messages_psychology_gin', table_name='chat_messages', postgresql_using='gin')
    op.drop_index(op.f('ix_chat_messages_deleted_at'), table_name='chat_messages')
    op.drop_index(op.f('ix_chat_messages_created_at'), table_name='chat_messages')
    op.drop_table('chat_messages')
    op.drop_index('ix_topics_user_name', table_name='topics')
    op.drop_index('ix_topics_psychology_gin', table_name='topics', postgresql_using='gin')
    op.drop_index('ix_topics_parent_sort', table_name='topics')
    op.drop_index(op.f('ix_topics_deleted_at'), table_name='topics')
    op.drop_index(op.f('ix_topics_created_at'), table_name='topics')
    op.drop_table('topics')
    op.drop_index('ix_templates_usage', table_name='entry_templates')
    op.drop_index('ix_templates_psychology_gin', table_name='entry_templates', postgresql_using='gin')
    op.drop_index('ix_templates_category_public', table_name='entry_templates')
    op.drop_index(op.f('ix_entry_templates_deleted_at'), table_name='entry_templates')
    op.drop_index(op.f('ix_entry_templates_created_at'), table_name='entry_templates')
    op.drop_table('entry_templates')
    # ### end Alembic commands ###
