# backend/alembic/script.py.mako - Migration Template

"""add role system to auth users

Revision ID: 47252dfa67d3
Revises: 342ebd797ac1
Create Date: 2025-08-11 20:42:05.591525

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '47252dfa67d3'
down_revision: Union[str, None] = '342ebd797ac1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Create enum type first
    user_role_enum = sa.Enum('USER', 'ADMIN', 'SUPERUSER', name='user_role_enum')
    user_role_enum.create(op.get_bind())
    
    # Add column with default value
    op.add_column('auth_users', sa.Column('role', user_role_enum, nullable=False, server_default='USER'))
    op.drop_constraint(op.f('uq_auth_users_email'), 'auth_users', type_='unique')
    op.drop_constraint(op.f('uq_auth_users_username'), 'auth_users', type_='unique')
    op.drop_index(op.f('ix_auth_users_email'), table_name='auth_users')
    op.create_index(op.f('ix_auth_users_email'), 'auth_users', ['email'], unique=True)
    op.drop_index(op.f('ix_auth_users_username'), table_name='auth_users')
    op.create_index(op.f('ix_auth_users_username'), 'auth_users', ['username'], unique=True)
    op.create_index(op.f('ix_auth_users_role'), 'auth_users', ['role'], unique=False)
    op.alter_column('entries', 'sentiment_score',
               existing_type=sa.NUMERIC(precision=5, scale=4),
               type_=sa.Numeric(precision=3, scale=2),
               existing_nullable=True)
    op.create_index('ix_entries_analysis_gin', 'entries', ['analysis_results'], unique=False, postgresql_using='gin')
    op.create_index('ix_entries_psychology_gin', 'entries', ['psychology_metadata'], unique=False, postgresql_using='gin')
    op.create_index('ix_entries_search_vector', 'entries', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_index('ix_entries_tags_gin', 'entries', ['tags'], unique=False, postgresql_using='gin')
    op.create_foreign_key(None, 'entries', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'entries', 'entry_templates', ['template_id'], ['id'], ondelete='SET NULL')
    op.drop_constraint(op.f('uq_refresh_tokens_token'), 'refresh_tokens', type_='unique')
    op.drop_index(op.f('ix_refresh_tokens_token'), table_name='refresh_tokens')
    op.create_index(op.f('ix_refresh_tokens_token'), 'refresh_tokens', ['token'], unique=True)
    op.create_foreign_key(None, 'refresh_tokens', 'auth_users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_index('ix_topics_psychology_gin', 'topics', ['psychology_domains'], unique=False, postgresql_using='gin')
    op.create_unique_constraint('uq_topics_user_name_parent', 'topics', ['user_id', 'name', 'parent_id'])
    op.create_foreign_key(None, 'topics', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'topics', type_='foreignkey')
    op.drop_constraint('uq_topics_user_name_parent', 'topics', type_='unique')
    op.drop_index('ix_topics_psychology_gin', table_name='topics', postgresql_using='gin')
    op.drop_constraint(None, 'refresh_tokens', type_='foreignkey')
    op.drop_index(op.f('ix_refresh_tokens_token'), table_name='refresh_tokens')
    op.create_index(op.f('ix_refresh_tokens_token'), 'refresh_tokens', ['token'], unique=False)
    op.create_unique_constraint(op.f('uq_refresh_tokens_token'), 'refresh_tokens', ['token'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'entries', type_='foreignkey')
    op.drop_constraint(None, 'entries', type_='foreignkey')
    op.drop_index('ix_entries_tags_gin', table_name='entries', postgresql_using='gin')
    op.drop_index('ix_entries_search_vector', table_name='entries', postgresql_using='gin')
    op.drop_index('ix_entries_psychology_gin', table_name='entries', postgresql_using='gin')
    op.drop_index('ix_entries_analysis_gin', table_name='entries', postgresql_using='gin')
    op.alter_column('entries', 'sentiment_score',
               existing_type=sa.Numeric(precision=3, scale=2),
               type_=sa.NUMERIC(precision=5, scale=4),
               existing_nullable=True)
    op.drop_index(op.f('ix_auth_users_role'), table_name='auth_users')
    op.drop_index(op.f('ix_auth_users_username'), table_name='auth_users')
    op.create_index(op.f('ix_auth_users_username'), 'auth_users', ['username'], unique=False)
    op.drop_index(op.f('ix_auth_users_email'), table_name='auth_users')
    op.create_index(op.f('ix_auth_users_email'), 'auth_users', ['email'], unique=False)
    op.create_unique_constraint(op.f('uq_auth_users_username'), 'auth_users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('uq_auth_users_email'), 'auth_users', ['email'], postgresql_nulls_not_distinct=False)
    op.drop_column('auth_users', 'role')
    # Drop enum type
    user_role_enum = sa.Enum('USER', 'ADMIN', 'SUPERUSER', name='user_role_enum')
    user_role_enum.drop(op.get_bind())
    # ### end Alembic commands ###
